plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

ext {
    libonsemVersionName = '1.0.9'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'com.github.carloacu'
                artifactId = 'onsem'
                version = libonsemVersionName
            }
        }
    }
}

// Execute "./gradlew publishToMavenLocal" on the root of the repository to publish to maven

build {
    dependsOn(preBuild)
    println "Building the databases..."
    exec {
        executable "./build-databases.sh"
    }
    println "Building the databases finished"
}

android {
    compileSdk 30

    defaultConfig {
        minSdk 28
        targetSdk 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', 'ONSEM_VERSION_NAME', "\"$libonsemVersionName\""

        ndk {
            abiFilters 'arm64-v8a'
        }

        externalNativeBuild {
            // Note that there are two `cmake` blocks,
            // see https://stackoverflow.com/questions/47370186/could-not-find-method-cppflags-arguments-for-arguments
            cmake {
                targets "onsem-jni"

                // Note that there are two `cmake` blocks,
                // see https://stackoverflow.com/questions/47370186/could-not-find-method-cppflags-arguments-for-arguments
                arguments "-DCOUT_TO_ANDROID_LOG=OFF"
            }
        }
    }

    externalNativeBuild {
        cmake {
            // Note that there are two `cmake` blocks,
            // see https://stackoverflow.com/questions/47370186/could-not-find-method-cppflags-arguments-for-arguments
            path file('src/main/cpp/CMakeLists.txt')
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${variant.buildType.name}-${libonsemVersionName}.aar"
            }
        }
    }
}

dependencies {
    // Appcompat
    implementation 'androidx.appcompat:appcompat:1.3.1'

    // Kotlin
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1"

    // Faster XML (actually used for JSON)
    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.11.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.11.3'

    // Test
    implementation 'junit:junit:4.13.2'
    implementation 'androidx.test:monitor:1.3.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

sourceSets {
    androidTest {
        java.srcDir file('androidTest/java')
    }
}